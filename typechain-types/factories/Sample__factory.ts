/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Sample, SampleInterface } from "../Sample";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x6080604052607b600055348015601457600080fd5b50600180548082018255600a7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6918201558154808301909255601491015530600090815260026020526040902060649055603f8060726000396000f3fe6080604052600080fdfea26469706673582212203974fd3d3ce397797a198f2cd0d83a73fbf4ab7800ba373a673e0dba4e6acf4064736f6c63430008120033";

type SampleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Sample__factory extends ContractFactory {
  constructor(...args: SampleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Sample> {
    return super.deploy(overrides || {}) as Promise<Sample>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Sample {
    return super.attach(address) as Sample;
  }
  override connect(signer: Signer): Sample__factory {
    return super.connect(signer) as Sample__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleInterface {
    return new utils.Interface(_abi) as SampleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Sample {
    return new Contract(address, _abi, signerOrProvider) as Sample;
  }
}
